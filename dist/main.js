(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(15),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,'.title-txt {\n  font-size: 50px;\n  font-family: "Original Surfer", cursive;\n  font-weight: 800;\n  transition: letter-spacing 1s;\n}\n\n.title-txt:hover {\n  letter-spacing: 4px;\n}\n\n.bold-text {\n  font-weight: bold;\n}\n\n.bg-gray {\n  background-color: #ebebeb;\n}\n\n.permanent-back-gray {\n  background-color: rgb(175, 173, 173) !important;\n  border-radius: 4px;\n}\n\n.col-white {\n  color: white;\n}\n\n.h-100-vh {\n  height: 89.5vh;\n}\n\n.add-btn {\n  border: none;\n  padding: 5px 9px;\n  background-color: inherit;\n}\n\n.add-btn:hover {\n  background-color: rgb(175, 173, 173);\n  border-radius: 3px;\n  transition: background-color 1s;\n}\n\n.dis-none {\n  display: none !important;\n}\n\n.cur-pointer {\n  cursor: pointer;\n}\n\n.w-48 {\n  width: 48%;\n}\n\n.cross {\n  border: none;\n  background-color: red;\n  border-radius: 5px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,uCAAuC;EACvC,gBAAgB;EAChB,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,+CAA+C;EAC/C,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;EAClB,+BAA+B;AACjC;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;AACpB",sourcesContent:['.title-txt {\n  font-size: 50px;\n  font-family: "Original Surfer", cursive;\n  font-weight: 800;\n  transition: letter-spacing 1s;\n}\n\n.title-txt:hover {\n  letter-spacing: 4px;\n}\n\n.bold-text {\n  font-weight: bold;\n}\n\n.bg-gray {\n  background-color: #ebebeb;\n}\n\n.permanent-back-gray {\n  background-color: rgb(175, 173, 173) !important;\n  border-radius: 4px;\n}\n\n.col-white {\n  color: white;\n}\n\n.h-100-vh {\n  height: 89.5vh;\n}\n\n.add-btn {\n  border: none;\n  padding: 5px 9px;\n  background-color: inherit;\n}\n\n.add-btn:hover {\n  background-color: rgb(175, 173, 173);\n  border-radius: 3px;\n  transition: background-color 1s;\n}\n\n.dis-none {\n  display: none !important;\n}\n\n.cur-pointer {\n  cursor: pointer;\n}\n\n.w-48 {\n  width: 48%;\n}\n\n.cross {\n  border: none;\n  background-color: red;\n  border-radius: 5px;\n}\n'],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);o&&r[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=n[t];return o}n.exports=function(n){var t,o,r=(o=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],o=!0,r=!1,a=void 0;try{for(var i,s=n[Symbol.iterator]();!(o=(i=s.next()).done)&&(t.push(i.value),!e||t.length!==e);o=!0);}catch(n){r=!0,a=n}finally{try{o||null==s.return||s.return()}finally{if(r)throw a}}return t}}(t,o)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var o=Object.prototype.toString.call(n).slice(8,-1);return"Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o?Array.from(n):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(n,t):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[1],i=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(c," */"),l=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(l).concat([d]).join("\n")}return[a].join("\n")}},379:(n,e,t)=>{var o,r=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function i(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},o=[],r=0;r<n.length;r++){var s=n[r],c=e.base?s[0]+e.base:s[0],d=t[c]||0,l="".concat(c," ").concat(d);t[c]=d+1;var u=i(l),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(a[u].references++,a[u].updater(p)):a.push({identifier:l,updater:A(p,e),references:1}),o.push(l)}return o}function c(n){var e=document.createElement("style"),o=n.attributes||{};if(void 0===o.nonce){var a=t.nc;a&&(o.nonce=a)}if(Object.keys(o).forEach((function(n){e.setAttribute(n,o[n])})),"function"==typeof n.insert)n.insert(e);else{var i=r(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var d,l=(d=[],function(n,e){return d[n]=e,d.filter(Boolean).join("\n")});function u(n,e,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(n.styleSheet)n.styleSheet.cssText=l(e,r);else{var a=document.createTextNode(r),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}function p(n,e,t){var o=t.css,r=t.media,a=t.sourceMap;if(r?n.setAttribute("media",r):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}var m=null,f=0;function A(n,e){var t,o,r;if(e.singleton){var a=f++;t=m||(m=c(e)),o=u.bind(null,t,a,!1),r=u.bind(null,t,a,!0)}else t=c(e),o=p.bind(null,t,e),r=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else r()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var o=0;o<t.length;o++){var r=i(t[o]);a[r].references--}for(var c=s(n,e),d=0;d<t.length;d++){var l=i(t[d]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}t=c}}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),o=t(426);e()(o.Z,{insert:"head",singleton:!1}),o.Z.locals,document.getElementById("content").innerHTML='\n    <nav class="navbar navbar-dark bg-dark">\n      <span class="navbar-brand mb-0 h1 title-txt"><i class="far fa-calendar-check mr-3"></i> ToDos</span>\n    </nav>\n  ',(()=>{const n=document.getElementById("content"),e=document.createElement("div");e.className="container-fluid",e.innerHTML="\n    <div class=\"row\">\n      <div id = 'left-container' class='col-3 bg-gray h-100-vh'>\n        <h2 class = 'bold-text d-flex justify-content-center mt-3'><i class=\"fas fa-project-diagram mr-2\"></i>Projects</h2>\n        <button id = 'add-project' class = 'add-btn cur-pointer w-100 my-2 text-left'><i class='fas fa-plus mr-2'></i> Add Project</button>\n      </div>\n      <div id = 'right-container' class=\"col-9\"></div>\n    </div>\n  ",n.appendChild(e)})(),(()=>{const n=document.getElementById("left-container"),e=document.createElement("div");e.id="project-form",e.classList="dis-none",e.innerHTML="\n    <form>\n      <input id = 'proj-name' class = 'form-control' type='text' name = 'proj-name' placeholder=\"Project name..\">\n      <input id = 'ad-proj' class = 'btn btn-primary my-1 w-48' type=\"submit\" value=\"Add\">\n      <input class = 'btn btn-danger w-50' type=\"submit\" value=\"Cancel\">\n    </form>\n  ",n.appendChild(e)})();const r=(n,e,t,o)=>({title:n,description:e,dueDate:t,priority:o}),a=n=>({name:n,todos:[]});let i=JSON.parse(localStorage.getItem("projectnames"));if(null===i||0===i.length){i=[];const n=a("default"),e=r("def1","def2","def3","def4");n.todos.push(e),i.push(n),localStorage.setItem("projectnames",JSON.stringify(i))}(()=>{const n=document.getElementById("left-container"),e=JSON.parse(localStorage.getItem("projectnames")),t=e.length;for(let o=0;o<t;o++){const t=document.createElement("div");t.id=`project-${o}`,t.className="add-btn cur-pointer bold-text d-flex justify-content-between",t.innerHTML=`<div><i class="fas fa-th-list"></i> ${e[o].name}</div> <input id = 'del-project-${o}' class = 'cross dis-none' type="submit" value="x">`,n.appendChild(t)}})(),(n=>{const e=document.getElementById("right-container");for(let t=0;t<n.length;t++){const o=document.createElement("div");o.id=`name-${t}`,o.innerHTML=`<h1 class = 'bold-text ml-3 mt-3'>${n[t].name}</h1>`,o.className="dis-none",e.appendChild(o);const r=document.createElement("div");r.id=`task-button-${t}`,r.innerHTML="<button id = 'add-task' class = 'add-btn cur-pointer w-100 my-2 text-center'><i class='fas fa-plus mr-2'></i> Add Task</button>",r.className="dis-none",e.appendChild(r);for(let o=0;o<n[t].todos.length;o++){const r=document.createElement("div");r.id=`task-${t}-${o}`,r.innerHTML=`\n        <h3>${n[t].todos[o].title}</h3>\n        <p>${n[t].todos[o].description}</p>\n        <p>${n[t].todos[o].dueDate}</p>\n        <p>${n[t].todos[o].priority}</p>\n      `,r.className="dis-none",e.appendChild(r)}}const t=document.createElement("div");t.id="todo-form",t.classList="dis-none w-50 m-auto",t.innerHTML="\n      <form>\n        <input id = 'todo-title' class = 'form-control' type='text' name='todo-title' placeholder='title..'>\n        <input id = 'todo-description' class = 'form-control' type='text' name='todo-description' placeholder='description..'>\n        <input id = 'todo-date' class = 'form-control' type='text' name='todo-date' placeholder='due-date..'>\n        <input id = 'todo-priority' class = 'form-control' type='text' name='todo-priority' placeholder='priority'>\n        <input id = 'add-todo' class = 'btn btn-primary my-1 w-48' type='submit' value='Add'>\n        <input class = 'btn btn-danger w-50' type = 'submit' value = 'Cancel'>\n      </form>\n    ",e.appendChild(t)})(i);const s=document.getElementById("add-project"),c=document.getElementById("project-form"),d=document.getElementById("ad-proj"),l=document.getElementById("add-todo"),u=n=>{for(let e=0;e<i.length;e++){const t=document.getElementById(`name-${e}`),o=document.getElementById(`project-${e}`),r=document.getElementById(`task-button-${e}`);if(e===n){t.classList.remove("dis-none"),r.classList.remove("dis-none"),o.classList.contains("permanent-back-gray")||o.classList.add("permanent-back-gray");for(let n=0;n<i[e].todos.length;n++)document.getElementById(`task-${e}-${n}`).classList.remove("dis-none")}else{t.classList.contains("dis-none")||t.classList.add("dis-none"),r.classList.contains("dis-none")||r.classList.add("dis-none");for(let n=0;n<i[e].todos.length;n++){const t=document.getElementById(`task-${e}-${n}`);t.classList.contains("dis-none")||t.classList.add("dis-none")}o.classList.remove("permanent-back-gray")}}};s.addEventListener("click",(()=>{c.classList.remove("dis-none")})),d.addEventListener("click",(n=>{const e=document.getElementById("proj-name").value;if(""!==e){c.classList.contains("dis-none")||c.classList.add("dis-none");const n=a(e);i.push(n),localStorage.setItem("projectnames",JSON.stringify(i))}else n.preventDefault()}));for(let n=0;n<i.length;n++){const e=document.getElementById(`project-${n}`),t=document.getElementById(`del-project-${n}`),o=document.getElementById(`task-button-${n}`);e.addEventListener("click",(()=>{u(n)})),e.addEventListener("mouseover",(n=>{t.classList.remove("dis-none")})),e.addEventListener("mouseout",(n=>{t.classList.contains("dis-none")||t.classList.add("dis-none")})),t.addEventListener("click",(()=>{var e;e=n,i.splice(e,1),localStorage.setItem("projectnames",JSON.stringify(i)),location.reload()})),o.addEventListener("click",(()=>{document.getElementById("todo-form").classList.remove("dis-none")}))}l.addEventListener("click",(n=>{n.preventDefault();const e=document.getElementById("todo-title").value,t=document.getElementById("todo-description").value,o=document.getElementById("todo-date").value,a=document.getElementById("todo-priority").value;""!==e&&""!==t&&""!==o&&""!==a&&((()=>{const n=document.getElementById("todo-form");n.classList.contains("dis-none")||n.classList.add("dis-none")})(),((n,e,t,o)=>{for(let a=0;a<i.length;a++)if(!document.getElementById(`name-${a}`).classList.contains("dis-none")){const s=i[a],c=r(n,e,t,o);s.todos.push(c),localStorage.setItem("projectnames",JSON.stringify(i));break}location.reload()})(e,t,o,a))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,