(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(15),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([e.id,'.title-txt {\n  font-size: 50px;\n  font-family: "Original Surfer", cursive;\n  font-weight: 800;\n  transition: letter-spacing 1s;\n}\n\n.title-txt:hover {\n  letter-spacing: 4px;\n}\n\n.bold-text {\n  font-weight: bold;\n}\n\n.bg-gray {\n  background-color: #ebebeb;\n}\n\n.permanent-back-gray {\n  background-color: rgb(175, 173, 173) !important;\n  border-radius: 4px;\n}\n\n.col-white {\n  color: white;\n}\n\n.h-100-vh {\n  height: 89.5vh;\n}\n\n.add-btn {\n  border: none;\n  padding: 5px 9px;\n  background-color: inherit;\n}\n\n.add-btn:hover {\n  background-color: rgb(175, 173, 173);\n  border-radius: 3px;\n  transition: background-color 1s;\n}\n\n.dis-none {\n  display: none !important;\n}\n\n.cur-pointer {\n  cursor: pointer;\n}\n\n.w-48 {\n  width: 48%;\n}\n\n.cross {\n  border: none;\n  background-color: red;\n  border-radius: 5px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,uCAAuC;EACvC,gBAAgB;EAChB,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,+CAA+C;EAC/C,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;EAClB,+BAA+B;AACjC;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;AACpB",sourcesContent:['.title-txt {\n  font-size: 50px;\n  font-family: "Original Surfer", cursive;\n  font-weight: 800;\n  transition: letter-spacing 1s;\n}\n\n.title-txt:hover {\n  letter-spacing: 4px;\n}\n\n.bold-text {\n  font-weight: bold;\n}\n\n.bg-gray {\n  background-color: #ebebeb;\n}\n\n.permanent-back-gray {\n  background-color: rgb(175, 173, 173) !important;\n  border-radius: 4px;\n}\n\n.col-white {\n  color: white;\n}\n\n.h-100-vh {\n  height: 89.5vh;\n}\n\n.add-btn {\n  border: none;\n  padding: 5px 9px;\n  background-color: inherit;\n}\n\n.add-btn:hover {\n  background-color: rgb(175, 173, 173);\n  border-radius: 3px;\n  transition: background-color 1s;\n}\n\n.dis-none {\n  display: none !important;\n}\n\n.cur-pointer {\n  cursor: pointer;\n}\n\n.w-48 {\n  width: 48%;\n}\n\n.cross {\n  border: none;\n  background-color: red;\n  border-radius: 5px;\n}\n'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&r[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),t.push(d))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],o=!0,r=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(o=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);o=!0);}catch(e){r=!0,a=e}finally{try{o||null==s.return||s.return()}finally{if(r)throw a}}return n}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[1],i=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(d," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([c]).join("\n")}return[a].join("\n")}},379:(e,t,n)=>{var o,r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function i(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},o=[],r=0;r<e.length;r++){var s=e[r],d=t.base?s[0]+t.base:s[0],c=n[d]||0,l="".concat(d," ").concat(c);n[d]=c+1;var u=i(l),m={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(a[u].references++,a[u].updater(m)):a.push({identifier:l,updater:A(m,t),references:1}),o.push(l)}return o}function d(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var a=n.nc;a&&(o.nonce=a)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var i=r(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var c,l=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function u(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=l(t,r);else{var a=document.createTextNode(r),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function m(e,t,n){var o=n.css,r=n.media,a=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var p=null,f=0;function A(e,t){var n,o,r;if(t.singleton){var a=f++;n=p||(p=d(t)),o=u.bind(null,n,a,!1),r=u.bind(null,n,a,!0)}else n=d(t),o=m.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=i(n[o]);a[r].references--}for(var d=s(e,t),c=0;c<n.length;c++){var l=i(n[c]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=d}}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(426);t()(o.Z,{insert:"head",singleton:!1}),o.Z.locals,document.getElementById("content").innerHTML='\n    <nav class="navbar navbar-dark bg-dark">\n      <span class="navbar-brand mb-0 h1 title-txt"><i class="far fa-calendar-check mr-3"></i> ToDos</span>\n    </nav>\n  ',(()=>{const e=document.getElementById("content"),t=document.createElement("div");t.className="container-fluid",t.innerHTML="\n    <div class=\"row\">\n      <div id = 'left-container' class='col-3 bg-gray h-100-vh'>\n        <h2 class = 'bold-text d-flex justify-content-center mt-3'><i class=\"fas fa-project-diagram mr-2\"></i>Projects</h2>\n        <button id = 'add-project' class = 'add-btn cur-pointer w-100 my-2 text-left'><i class='fas fa-plus mr-2'></i> Add Project</button>\n      </div>\n      <div id = 'right-container' class=\"col-9\"></div>\n    </div>\n  ",e.appendChild(t)})(),(()=>{const e=document.getElementById("left-container"),t=document.createElement("div");t.id="project-form",t.classList="dis-none",t.innerHTML="\n    <form>\n      <input id = 'proj-name' class = 'form-control' type='text' name = 'proj-name' placeholder=\"Project name..\">\n      <input id = 'ad-proj' class = 'btn btn-primary my-1 w-48' type=\"submit\" value=\"Add\">\n      <input id = 'cancelProject' class = 'btn btn-danger w-50' type=\"submit\" value=\"Cancel\">\n    </form>\n  ",e.appendChild(t)})();const r=(e,t,n,o)=>({title:e,description:t,dueDate:n,priority:o}),a=e=>({name:e,todos:[]});let i=JSON.parse(localStorage.getItem("projectnames"));if(null===i||0===i.length){i=[];const e=a("default"),t=r("title","description","dueDate","priority");e.todos.push(t),i.push(e),localStorage.setItem("projectnames",JSON.stringify(i))}(()=>{const e=document.getElementById("left-container"),t=JSON.parse(localStorage.getItem("projectnames")),n=t.length;for(let o=0;o<n;o++){const n=document.createElement("div");n.id=`project-${o}`,n.className="add-btn cur-pointer bold-text d-flex justify-content-between",n.innerHTML=`<div><i class="fas fa-th-list"></i> ${t[o].name}</div> <input id = 'del-project-${o}' class = 'cross dis-none' type="submit" value="x">`,e.appendChild(n)}})(),(e=>{const t=document.getElementById("right-container");for(let n=0;n<e.length;n++){const o=document.createElement("div");o.id=`name-${n}`,o.innerHTML=`<h1 class = 'bold-text ml-3 mt-3'>${e[n].name}</h1>`,o.className="dis-none",t.appendChild(o);const r=document.createElement("div");r.id=`task-button-${n}`,r.innerHTML="<button id = 'add-task' class = 'add-btn cur-pointer w-100 my-2 text-center'><i class='fas fa-plus mr-2'></i> Add Task</button>",r.className="dis-none",t.appendChild(r);for(let o=0;o<e[n].todos.length;o++){const r=document.createElement("div");r.className="dis-none card col-4 mx-auto my-2",r.id=`task-${n}-${o}`,r.innerHTML=`\n        <div class="card-body">\n          <h5 class="card-title bold-text">${e[n].todos[o].title}</h5>\n          <p class="card-text">${e[n].todos[o].description}</p>\n          <span class="card-link bold-text">${e[n].todos[o].dueDate}</span>\n          <span class="card-link bold-text">${e[n].todos[o].priority}</span> <br>\n          <div class = 'd-flex  mt-3'>\n            <input id = 'edit-${n}-${o}' class = 'btn btn-primary w-50 mr-2' type="submit" value="Edit">\n            <input id = 'delete-${n}-${o}' class = 'btn btn-danger w-50' type="submit" value="Delete">\n          </div>\n        </div>\n      `,t.appendChild(r)}}const n=document.createElement("div");n.id="todo-form",n.classList="dis-none w-50 m-auto",n.innerHTML="\n      <form>\n        <input id = 'todo-title' class = 'form-control' type='text' name='todo-title' placeholder='title..'>\n        <input id = 'todo-description' class = 'form-control' type='text' name='todo-description' placeholder='description..'>\n        <input id = 'todo-date' class = 'form-control' type='text' name='todo-date' placeholder='due-date..'>\n        <input id = 'todo-priority' class = 'form-control' type='text' name='todo-priority' placeholder='priority..'>\n        <input id = 'add-todo' class = 'btn btn-primary my-1 w-48' type='submit' value='Add'>\n        <input id = 'cancel' class = 'btn btn-danger w-50' type = 'submit' value = 'Cancel'>\n      </form>\n    ",t.appendChild(n)})(i);const s=document.getElementById("add-project"),d=document.getElementById("project-form"),c=document.getElementById("ad-proj"),l=document.getElementById("add-todo"),u=document.getElementById("cancel"),m=document.getElementById("cancelProject");let p=!1;const f=[],A=()=>{d.classList.contains("dis-none")||d.classList.add("dis-none")},g=e=>{for(let t=0;t<i.length;t++){const n=document.getElementById(`name-${t}`),o=document.getElementById(`project-${t}`),r=document.getElementById(`task-button-${t}`);if(t===e){n.classList.remove("dis-none"),r.classList.remove("dis-none"),o.classList.contains("permanent-back-gray")||o.classList.add("permanent-back-gray");for(let e=0;e<i[t].todos.length;e++)document.getElementById(`task-${t}-${e}`).classList.remove("dis-none")}else{n.classList.contains("dis-none")||n.classList.add("dis-none"),r.classList.contains("dis-none")||r.classList.add("dis-none");for(let e=0;e<i[t].todos.length;e++){const n=document.getElementById(`task-${t}-${e}`);n.classList.contains("dis-none")||n.classList.add("dis-none")}o.classList.remove("permanent-back-gray")}}},v=()=>{const e=document.getElementById("todo-form");e.classList.contains("dis-none")||e.classList.add("dis-none")},b=()=>{for(let e=0;e<i.length;e++)if(!document.getElementById(`name-${e}`).classList.contains("dis-none"))return e},y=e=>{for(let t=0;t<i[e].todos.length;t++)document.getElementById(`task-${e}-${t}`).classList.remove("dis-none")},h=()=>{document.getElementById("todo-form").classList.remove("dis-none"),(e=>{for(let t=0;t<i[e].todos.length;t++)document.getElementById(`task-${e}-${t}`).classList.add("dis-none")})(b())};s.addEventListener("click",(()=>{d.classList.remove("dis-none")})),c.addEventListener("click",(e=>{const t=document.getElementById("proj-name").value;if(""!==t){A();const e=a(t);i.push(e),localStorage.setItem("projectnames",JSON.stringify(i))}else e.preventDefault()}));for(let e=0;e<i.length;e++){const t=document.getElementById(`project-${e}`),n=document.getElementById(`del-project-${e}`),o=document.getElementById(`task-button-${e}`);t.addEventListener("click",(()=>{v(),g(e)})),t.addEventListener("mouseover",(e=>{n.classList.remove("dis-none")})),t.addEventListener("mouseout",(e=>{n.classList.contains("dis-none")||n.classList.add("dis-none")})),n.addEventListener("click",(()=>{var t;t=e,i.splice(t,1),localStorage.setItem("projectnames",JSON.stringify(i)),location.reload()})),o.addEventListener("click",(()=>{h()}));for(let t=0;t<i[e].todos.length;t++){const n=document.getElementById(`delete-${e}-${t}`),o=document.getElementById(`edit-${e}-${t}`);n.addEventListener("click",(()=>{i[e].todos.splice(t,1),localStorage.setItem("projectnames",JSON.stringify(i)),location.reload()})),o.addEventListener("click",(()=>{p=!0,f.push(e),f.push(t);const n=i[e].todos[t].title,o=i[e].todos[t].description,r=i[e].todos[t].dueDate,a=i[e].todos[t].priority;h(),document.getElementById("todo-title").value=n,document.getElementById("todo-description").value=o,document.getElementById("todo-date").value=r,document.getElementById("todo-priority").value=a}))}}l.addEventListener("click",(e=>{e.preventDefault();const t=document.getElementById("todo-title").value,n=document.getElementById("todo-description").value,o=document.getElementById("todo-date").value,a=document.getElementById("todo-priority").value;""!==t&&""!==n&&""!==o&&""!==a&&(v(),((e,t,n,o)=>{if(p){const r=f.pop(),a=f.pop();i[a].todos[r].title=e,i[a].todos[r].description=t,i[a].todos[r].dueDate=n,i[a].todos[r].priority=o,p=!1}else{const a=b(),s=i[a],d=r(e,t,n,o);s.todos.push(d)}localStorage.setItem("projectnames",JSON.stringify(i)),location.reload()})(t,n,o,a))})),u.addEventListener("click",(e=>{if(e.preventDefault(),v(),p){f.pop();const e=f.pop();y(e),p=!1}else{const e=b();y(e)}})),m.addEventListener("click",(e=>{e.preventDefault(),A()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,