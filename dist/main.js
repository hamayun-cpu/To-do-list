(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(15),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,'.title-txt {\n  font-size: 50px;\n  font-family: "Original Surfer", cursive;\n  font-weight: 800;\n  transition: letter-spacing 1s;\n}\n\n.title-txt:hover {\n  letter-spacing: 4px;\n}\n\n.bold-text {\n  font-weight: bold;\n}\n\n.bg-gray {\n  background-color: #ebebeb;\n}\n\n.permanent-back-gray {\n  background-color: rgb(175, 173, 173) !important;\n  border-radius: 4px;\n}\n\n.col-white {\n  color: white;\n}\n\n.h-100-vh {\n  height: 89.5vh;\n}\n\n.add-btn {\n  border: none;\n  padding: 5px 9px;\n  background-color: inherit;\n}\n\n.add-btn:hover {\n  background-color: rgb(175, 173, 173);\n  border-radius: 3px;\n  transition: background-color 1s;\n}\n\n.dis-none {\n  display: none !important;\n}\n\n.cur-pointer {\n  cursor: pointer;\n}\n\n.w-48 {\n  width: 48%;\n}\n\n.cross {\n  border: none;\n  background-color: red;\n  border-radius: 5px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,uCAAuC;EACvC,gBAAgB;EAChB,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,+CAA+C;EAC/C,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;EAClB,+BAA+B;AACjC;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;AACpB",sourcesContent:['.title-txt {\n  font-size: 50px;\n  font-family: "Original Surfer", cursive;\n  font-weight: 800;\n  transition: letter-spacing 1s;\n}\n\n.title-txt:hover {\n  letter-spacing: 4px;\n}\n\n.bold-text {\n  font-weight: bold;\n}\n\n.bg-gray {\n  background-color: #ebebeb;\n}\n\n.permanent-back-gray {\n  background-color: rgb(175, 173, 173) !important;\n  border-radius: 4px;\n}\n\n.col-white {\n  color: white;\n}\n\n.h-100-vh {\n  height: 89.5vh;\n}\n\n.add-btn {\n  border: none;\n  padding: 5px 9px;\n  background-color: inherit;\n}\n\n.add-btn:hover {\n  background-color: rgb(175, 173, 173);\n  border-radius: 3px;\n  transition: background-color 1s;\n}\n\n.dis-none {\n  display: none !important;\n}\n\n.cur-pointer {\n  cursor: pointer;\n}\n\n.w-48 {\n  width: 48%;\n}\n\n.cross {\n  border: none;\n  background-color: red;\n  border-radius: 5px;\n}\n'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);o&&r[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}e.exports=function(e){var t,o,r=(o=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],o=!0,r=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(o=(i=s.next()).done)&&(t.push(i.value),!n||t.length!==n);o=!0);}catch(e){r=!0,a=e}finally{try{o||null==s.return||s.return()}finally{if(r)throw a}}return t}}(t,o)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?n(e,t):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[1],i=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(c," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([d]).join("\n")}return[a].join("\n")}},379:(e,n,t)=>{var o,r=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function i(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},o=[],r=0;r<e.length;r++){var s=e[r],c=n.base?s[0]+n.base:s[0],d=t[c]||0,l="".concat(c," ").concat(d);t[c]=d+1;var u=i(l),m={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(a[u].references++,a[u].updater(m)):a.push({identifier:l,updater:A(m,n),references:1}),o.push(l)}return o}function c(e){var n=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var a=t.nc;a&&(o.nonce=a)}if(Object.keys(o).forEach((function(e){n.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(n);else{var i=r(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var d,l=(d=[],function(e,n){return d[e]=n,d.filter(Boolean).join("\n")});function u(e,n,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=l(n,r);else{var a=document.createTextNode(r),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(a,i[n]):e.appendChild(a)}}function m(e,n,t){var o=t.css,r=t.media,a=t.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var p=null,f=0;function A(e,n){var t,o,r;if(n.singleton){var a=f++;t=p||(p=c(n)),o=u.bind(null,t,a,!1),r=u.bind(null,t,a,!0)}else t=c(n),o=m.bind(null,t,n),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else r()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<t.length;o++){var r=i(t[o]);a[r].references--}for(var c=s(e,n),d=0;d<t.length;d++){var l=i(t[d]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}t=c}}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),o=t(426);n()(o.Z,{insert:"head",singleton:!1}),o.Z.locals,document.getElementById("content").innerHTML='\n    <nav class="navbar navbar-dark bg-dark">\n      <span class="navbar-brand mb-0 h1 title-txt"><i class="far fa-calendar-check mr-3"></i> ToDos</span>\n    </nav>\n  ',(()=>{const e=document.getElementById("content"),n=document.createElement("div");n.className="container-fluid",n.innerHTML="\n    <div class=\"row\">\n      <div id = 'left-container' class='col-3 bg-gray h-100-vh'>\n        <h2 class = 'bold-text d-flex justify-content-center mt-3'><i class=\"fas fa-project-diagram mr-2\"></i>Projects</h2>\n        <button id = 'add-project' class = 'add-btn cur-pointer w-100 my-2 text-left'><i class='fas fa-plus mr-2'></i> Add Project</button>\n      </div>\n      <div id = 'right-container' class=\"col-9\"></div>\n    </div>\n  ",e.appendChild(n)})(),(()=>{const e=document.getElementById("left-container"),n=document.createElement("div");n.id="project-form",n.classList="dis-none",n.innerHTML="\n    <form>\n      <input id = 'proj-name' class = 'form-control' type='text' name = 'proj-name' placeholder=\"Project name..\">\n      <input id = 'ad-proj' class = 'btn btn-primary my-1 w-48' type=\"submit\" value=\"Add\">\n      <input id = 'cancelProject' class = 'btn btn-danger w-50' type=\"submit\" value=\"Cancel\">\n    </form>\n  ",e.appendChild(n)})();const r=(e,n,t,o)=>({title:e,description:n,dueDate:t,priority:o}),a=e=>({name:e,todos:[]});let i=JSON.parse(localStorage.getItem("projectnames"));if(null===i||0===i.length){i=[];const e=a("default"),n=r("title","description","dueDate","priority");e.todos.push(n),i.push(e),localStorage.setItem("projectnames",JSON.stringify(i))}(()=>{const e=document.getElementById("left-container"),n=JSON.parse(localStorage.getItem("projectnames")),t=n.length;for(let o=0;o<t;o++){const t=document.createElement("div");t.id=`project-${o}`,t.className="add-btn cur-pointer bold-text d-flex justify-content-between",t.innerHTML=`<div><i class="fas fa-th-list"></i> ${n[o].name}</div> <input id = 'del-project-${o}' class = 'cross dis-none' type="submit" value="x">`,e.appendChild(t)}})(),(e=>{const n=document.getElementById("right-container");for(let t=0;t<e.length;t++){const o=document.createElement("div");o.id=`name-${t}`,o.innerHTML=`<h1 class = 'bold-text ml-3 mt-3'>${e[t].name}</h1>`,o.className="dis-none",n.appendChild(o);const r=document.createElement("div");r.id=`task-button-${t}`,r.innerHTML="<button id = 'add-task' class = 'add-btn cur-pointer w-100 my-2 text-center'><i class='fas fa-plus mr-2'></i> Add Task</button>",r.className="dis-none",n.appendChild(r);for(let o=0;o<e[t].todos.length;o++){const r=document.createElement("div");r.className="dis-none card col-4 mx-auto my-2",r.id=`task-${t}-${o}`,r.innerHTML=`\n        <div class="card-body">\n          <h5 class="card-title bold-text">${e[t].todos[o].title}</h5>\n          <p class="card-text">${e[t].todos[o].description}</p>\n          <span class="card-link bold-text">${e[t].todos[o].dueDate}</span>\n          <span class="card-link bold-text">${e[t].todos[o].priority}</span> <br>\n          <input id = 'delete-${t}-${o}' class = 'btn btn-danger w-50 mt-3' type="submit" value="Delete">\n        </div>\n      `,n.appendChild(r)}}const t=document.createElement("div");t.id="todo-form",t.classList="dis-none w-50 m-auto",t.innerHTML="\n      <form>\n        <input id = 'todo-title' class = 'form-control' type='text' name='todo-title' placeholder='title..'>\n        <input id = 'todo-description' class = 'form-control' type='text' name='todo-description' placeholder='description..'>\n        <input id = 'todo-date' class = 'form-control' type='text' name='todo-date' placeholder='due-date..'>\n        <input id = 'todo-priority' class = 'form-control' type='text' name='todo-priority' placeholder='priority'>\n        <input id = 'add-todo' class = 'btn btn-primary my-1 w-48' type='submit' value='Add'>\n        <input id = 'cancel' class = 'btn btn-danger w-50' type = 'submit' value = 'Cancel'>\n      </form>\n    ",n.appendChild(t)})(i);const s=document.getElementById("add-project"),c=document.getElementById("project-form"),d=document.getElementById("ad-proj"),l=document.getElementById("add-todo"),u=document.getElementById("cancel"),m=document.getElementById("cancelProject"),p=()=>{c.classList.contains("dis-none")||c.classList.add("dis-none")},f=e=>{A();for(let n=0;n<i.length;n++){const t=document.getElementById(`name-${n}`),o=document.getElementById(`project-${n}`),r=document.getElementById(`task-button-${n}`);if(n===e){t.classList.remove("dis-none"),r.classList.remove("dis-none"),o.classList.contains("permanent-back-gray")||o.classList.add("permanent-back-gray");for(let e=0;e<i[n].todos.length;e++)document.getElementById(`task-${n}-${e}`).classList.remove("dis-none")}else{t.classList.contains("dis-none")||t.classList.add("dis-none"),r.classList.contains("dis-none")||r.classList.add("dis-none");for(let e=0;e<i[n].todos.length;e++){const t=document.getElementById(`task-${n}-${e}`);t.classList.contains("dis-none")||t.classList.add("dis-none")}o.classList.remove("permanent-back-gray")}}},A=()=>{const e=document.getElementById("todo-form");e.classList.contains("dis-none")||e.classList.add("dis-none")};s.addEventListener("click",(()=>{c.classList.remove("dis-none")})),d.addEventListener("click",(e=>{const n=document.getElementById("proj-name").value;if(""!==n){p();const e=a(n);i.push(e),localStorage.setItem("projectnames",JSON.stringify(i))}else e.preventDefault()}));for(let e=0;e<i.length;e++){const n=document.getElementById(`project-${e}`),t=document.getElementById(`del-project-${e}`),o=document.getElementById(`task-button-${e}`);n.addEventListener("click",(()=>{f(e)})),n.addEventListener("mouseover",(e=>{t.classList.remove("dis-none")})),n.addEventListener("mouseout",(e=>{t.classList.contains("dis-none")||t.classList.add("dis-none")})),t.addEventListener("click",(()=>{var n;n=e,i.splice(n,1),localStorage.setItem("projectnames",JSON.stringify(i)),location.reload()})),o.addEventListener("click",(()=>{document.getElementById("todo-form").classList.remove("dis-none")}));for(let n=0;n<i[e].todos.length;n++)document.getElementById(`delete-${e}-${n}`).addEventListener("click",(()=>{i[e].todos.splice(n,1),localStorage.setItem("projectnames",JSON.stringify(i)),location.reload()}))}l.addEventListener("click",(e=>{e.preventDefault();const n=document.getElementById("todo-title").value,t=document.getElementById("todo-description").value,o=document.getElementById("todo-date").value,a=document.getElementById("todo-priority").value;""!==n&&""!==t&&""!==o&&""!==a&&(A(),((e,n,t,o)=>{for(let a=0;a<i.length;a++)if(!document.getElementById(`name-${a}`).classList.contains("dis-none")){const s=i[a],c=r(e,n,t,o);s.todos.push(c),localStorage.setItem("projectnames",JSON.stringify(i));break}location.reload()})(n,t,o,a))})),u.addEventListener("click",(()=>{A()})),m.addEventListener("click",(()=>{p()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,