(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(15),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([e.id,'.title-txt {\n  font-size: 50px;\n  font-family: "Original Surfer", cursive;\n  font-weight: 800;\n  transition: letter-spacing 1s;\n}\n\n.title-txt:hover {\n  letter-spacing: 4px;\n}\n\n.bold-text {\n  font-weight: bold;\n}\n\n.bg-gray {\n  background-color: #ebebeb;\n}\n\n.permanent-back-gray {\n  background-color: rgb(175, 173, 173) !important;\n  border-radius: 4px;\n}\n\n.col-white {\n  color: white;\n}\n\n.h-100-vh {\n  height: 89.5vh;\n}\n\n.add-btn {\n  border: none;\n  padding: 5px 9px;\n  background-color: inherit;\n}\n\n.add-btn:hover {\n  background-color: rgb(175, 173, 173);\n  border-radius: 3px;\n  transition: background-color 1s;\n}\n\n.dis-none {\n  display: none !important;\n}\n\n.cur-pointer {\n  cursor: pointer;\n}\n\n.w-48 {\n  width: 48%;\n}\n\n.cross {\n  border: none;\n  background-color: red;\n  border-radius: 5px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,uCAAuC;EACvC,gBAAgB;EAChB,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,+CAA+C;EAC/C,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;EAClB,+BAA+B;AACjC;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;AACpB",sourcesContent:['.title-txt {\n  font-size: 50px;\n  font-family: "Original Surfer", cursive;\n  font-weight: 800;\n  transition: letter-spacing 1s;\n}\n\n.title-txt:hover {\n  letter-spacing: 4px;\n}\n\n.bold-text {\n  font-weight: bold;\n}\n\n.bg-gray {\n  background-color: #ebebeb;\n}\n\n.permanent-back-gray {\n  background-color: rgb(175, 173, 173) !important;\n  border-radius: 4px;\n}\n\n.col-white {\n  color: white;\n}\n\n.h-100-vh {\n  height: 89.5vh;\n}\n\n.add-btn {\n  border: none;\n  padding: 5px 9px;\n  background-color: inherit;\n}\n\n.add-btn:hover {\n  background-color: rgb(175, 173, 173);\n  border-radius: 3px;\n  transition: background-color 1s;\n}\n\n.dis-none {\n  display: none !important;\n}\n\n.cur-pointer {\n  cursor: pointer;\n}\n\n.w-48 {\n  width: 48%;\n}\n\n.cross {\n  border: none;\n  background-color: red;\n  border-radius: 5px;\n}\n'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&r[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),t.push(d))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],o=!0,r=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(o=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);o=!0);}catch(e){r=!0,a=e}finally{try{o||null==s.return||s.return()}finally{if(r)throw a}}return n}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[1],i=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(d," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([c]).join("\n")}return[a].join("\n")}},379:(e,t,n)=>{var o,r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function i(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},o=[],r=0;r<e.length;r++){var s=e[r],d=t.base?s[0]+t.base:s[0],c=n[d]||0,l="".concat(d," ").concat(c);n[d]=c+1;var u=i(l),m={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(a[u].references++,a[u].updater(m)):a.push({identifier:l,updater:A(m,t),references:1}),o.push(l)}return o}function d(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var a=n.nc;a&&(o.nonce=a)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var i=r(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var c,l=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function u(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=l(t,r);else{var a=document.createTextNode(r),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function m(e,t,n){var o=n.css,r=n.media,a=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var p=null,f=0;function A(e,t){var n,o,r;if(t.singleton){var a=f++;n=p||(p=d(t)),o=u.bind(null,n,a,!1),r=u.bind(null,n,a,!0)}else n=d(t),o=m.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=i(n[o]);a[r].references--}for(var d=s(e,t),c=0;c<n.length;c++){var l=i(n[c]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=d}}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(426);t()(o.Z,{insert:"head",singleton:!1}),o.Z.locals,document.getElementById("content").innerHTML='\n    <nav class="navbar navbar-dark bg-dark">\n      <span class="navbar-brand mb-0 h1 title-txt"><i class="far fa-calendar-check mr-3"></i> ToDos</span>\n    </nav>\n  ',(()=>{const e=document.getElementById("content"),t=document.createElement("div");t.className="container-fluid",t.innerHTML="\n    <div class=\"row\">\n      <div id = 'left-container' class='col-3 bg-gray h-100-vh'>\n        <h2 class = 'bold-text d-flex justify-content-center mt-3'><i class=\"fas fa-project-diagram mr-2\"></i>Projects</h2>\n        <button id = 'add-project' class = 'add-btn cur-pointer w-100 my-2 text-left'><i class='fas fa-plus mr-2'></i> Add Project</button>\n      </div>\n      <div id = 'right-container' class=\"col-9\"></div>\n    </div>\n  ",e.appendChild(t)})(),(()=>{const e=document.getElementById("left-container"),t=document.createElement("div");t.id="project-form",t.classList="dis-none",t.innerHTML="\n    <form>\n      <input id = 'proj-name' class = 'form-control' type='text' name = 'proj-name' placeholder=\"Project name..\">\n      <input id = 'ad-proj' class = 'btn btn-primary my-1 w-48' type=\"submit\" value=\"Add\">\n      <input id = 'cancelProject' class = 'btn btn-danger w-50' type=\"submit\" value=\"Cancel\">\n    </form>\n  ",e.appendChild(t)})();const r=(e,t,n,o)=>({title:e,description:t,dueDate:n,priority:o}),a=e=>({name:e,todos:[]});let i=JSON.parse(localStorage.getItem("projectnames"));if(null===i||0===i.length){i=[];const e=a("default"),t=r("title","description","dueDate","priority");e.todos.push(t),i.push(e),localStorage.setItem("projectnames",JSON.stringify(i))}(()=>{const e=document.getElementById("left-container"),t=JSON.parse(localStorage.getItem("projectnames")),n=t.length;for(let o=0;o<n;o+=1){const n=document.createElement("div");n.id=`project-${o}`,n.className="add-btn cur-pointer bold-text d-flex justify-content-between",n.innerHTML=`<div><i class="fas fa-th-list"></i> ${t[o].name}</div> <input id = 'del-project-${o}' class = 'cross dis-none' type="submit" value="x">`,e.appendChild(n)}})(),(e=>{const t=document.getElementById("right-container");for(let n=0;n<e.length;n+=1){const o=document.createElement("div");o.id=`name-${n}`,o.innerHTML=`<h1 class = 'bold-text ml-3 mt-3'>${e[n].name}</h1>`,o.className="dis-none",t.appendChild(o);const r=document.createElement("div");r.id=`task-button-${n}`,r.innerHTML="<button id = 'add-task' class = 'add-btn cur-pointer w-100 my-2 text-center'><i class='fas fa-plus mr-2'></i> Add Task</button>",r.className="dis-none",t.appendChild(r);for(let o=0;o<e[n].todos.length;o+=1){const r=document.createElement("div");r.className="dis-none card col-4 mx-auto my-2",r.id=`task-${n}-${o}`,r.innerHTML=`\n        <div class="card-body">\n          <h5 class="card-title bold-text">${e[n].todos[o].title}</h5>\n          <p class="card-text">${e[n].todos[o].description}</p>\n          <span class="card-link bold-text">${e[n].todos[o].dueDate}</span>\n          <span class="card-link bold-text">${e[n].todos[o].priority}</span> <br>\n          <div class = 'd-flex  mt-3'>\n            <input id = 'edit-${n}-${o}' class = 'btn btn-primary w-50 mr-2' type="submit" value="Edit">\n            <input id = 'delete-${n}-${o}' class = 'btn btn-danger w-50' type="submit" value="Delete">\n          </div>\n        </div>\n      `,t.appendChild(r)}}const n=document.createElement("div");n.id="todo-form",n.classList="dis-none w-50 m-auto",n.innerHTML="\n      <form>\n        <input id = 'todo-title' class = 'form-control' type='text' name='todo-title' placeholder='title..'>\n        <input id = 'todo-description' class = 'form-control' type='text' name='todo-description' placeholder='description..'>\n        <input id = 'todo-date' class = 'form-control' type='text' name='todo-date' placeholder='due-date..'>\n        <input id = 'todo-priority' class = 'form-control' type='text' name='todo-priority' placeholder='priority..'>\n        <input id = 'add-todo' class = 'btn btn-primary my-1 w-48' type='submit' value='Add'>\n        <input id = 'cancel' class = 'btn btn-danger w-50' type = 'submit' value = 'Cancel'>\n      </form>\n    ",t.appendChild(n)})(i);const s=document.getElementById("add-project"),d=document.getElementById("project-form"),c=document.getElementById("ad-proj"),l=document.getElementById("add-todo"),u=document.getElementById("cancel"),m=document.getElementById("cancelProject");let p=!1;const f=[],A=()=>{d.classList.contains("dis-none")||d.classList.add("dis-none")},g=e=>{for(let t=0;t<i.length;t+=1){const n=document.getElementById(`name-${t}`),o=document.getElementById(`project-${t}`),r=document.getElementById(`task-button-${t}`);if(t===e){n.classList.remove("dis-none"),r.classList.remove("dis-none"),o.classList.contains("permanent-back-gray")||o.classList.add("permanent-back-gray");for(let e=0;e<i[t].todos.length;e+=1)document.getElementById(`task-${t}-${e}`).classList.remove("dis-none")}else{n.classList.contains("dis-none")||n.classList.add("dis-none"),r.classList.contains("dis-none")||r.classList.add("dis-none");for(let e=0;e<i[t].todos.length;e+=1){const n=document.getElementById(`task-${t}-${e}`);n.classList.contains("dis-none")||n.classList.add("dis-none")}o.classList.remove("permanent-back-gray")}}},v=()=>{const e=document.getElementById("todo-form");e.classList.contains("dis-none")||e.classList.add("dis-none")},b=()=>{let e;for(e=0;e<i.length&&document.getElementById(`name-${e}`).classList.contains("dis-none");e+=1);return e},y=e=>{for(let t=0;t<i[e].todos.length;t+=1)document.getElementById(`task-${e}-${t}`).classList.remove("dis-none")},h=()=>{document.getElementById("todo-form").classList.remove("dis-none"),(e=>{for(let t=0;t<i[e].todos.length;t+=1)document.getElementById(`task-${e}-${t}`).classList.add("dis-none")})(b())};s.addEventListener("click",(()=>{d.classList.remove("dis-none")})),c.addEventListener("click",(e=>{const t=document.getElementById("proj-name").value;if(""!==t){A();const e=a(t);i.push(e),localStorage.setItem("projectnames",JSON.stringify(i))}else e.preventDefault()}));for(let e=0;e<i.length;e+=1){const t=document.getElementById(`project-${e}`),n=document.getElementById(`del-project-${e}`),o=document.getElementById(`task-button-${e}`);t.addEventListener("click",(()=>{v(),g(e)})),t.addEventListener("mouseover",(()=>{n.classList.remove("dis-none")})),t.addEventListener("mouseout",(()=>{n.classList.contains("dis-none")||n.classList.add("dis-none")})),n.addEventListener("click",(()=>{var t;t=e,i.splice(t,1),localStorage.setItem("projectnames",JSON.stringify(i)),window.location.reload()})),o.addEventListener("click",(()=>{h()}));for(let t=0;t<i[e].todos.length;t+=1){const n=document.getElementById(`delete-${e}-${t}`),o=document.getElementById(`edit-${e}-${t}`);n.addEventListener("click",(()=>{i[e].todos.splice(t,1),localStorage.setItem("projectnames",JSON.stringify(i)),window.location.reload()})),o.addEventListener("click",(()=>{p=!0,f.push(e),f.push(t);const{title:n}=i[e].todos[t],o=i[e].todos[t].description,r=i[e].todos[t].dueDate,{priority:a}=i[e].todos[t];h(),document.getElementById("todo-title").value=n,document.getElementById("todo-description").value=o,document.getElementById("todo-date").value=r,document.getElementById("todo-priority").value=a}))}}l.addEventListener("click",(e=>{e.preventDefault();const t=document.getElementById("todo-title").value,n=document.getElementById("todo-description").value,o=document.getElementById("todo-date").value,a=document.getElementById("todo-priority").value;""!==t&&""!==n&&""!==o&&""!==a&&(v(),((e,t,n,o)=>{if(p){const r=f.pop(),a=f.pop();i[a].todos[r].title=e,i[a].todos[r].description=t,i[a].todos[r].dueDate=n,i[a].todos[r].priority=o,p=!1}else{const a=b(),s=i[a],d=r(e,t,n,o);s.todos.push(d)}localStorage.setItem("projectnames",JSON.stringify(i)),window.location.reload()})(t,n,o,a))})),u.addEventListener("click",(e=>{if(e.preventDefault(),v(),p){f.pop();const e=f.pop();y(e),p=!1}else{const e=b();y(e)}})),m.addEventListener("click",(e=>{e.preventDefault(),A()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy90YWJzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvc2lkZV9iYXIuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9mb3JtX3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9mYWN0b3J5X2Z1bnRpb25zLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9sb2FkX3Byb2plY3RzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvbG9hZF9wcm9qZWN0X3RvZG9zLmpzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk9iamVjdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsInByb3RvdHlwZSIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsInBhcmVudCIsImNvbnRhaW5lciIsImNsYXNzTmFtZSIsImZvcm0iLCJjbGFzc0xpc3QiLCJjcmVhdGVMaXN0IiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsImNyZWF0ZVByb2plY3QiLCJ0b2RvcyIsInN0b3JlZE5hbWVzIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiZGVmIiwic2V0SXRlbSIsInByb2plY3RzIiwic2l6ZSIsInByb2plY3QiLCJuZXdkIiwibmV3VCIsImoiLCJuZXdUb2RvIiwiYWRkUHJvamVjdCIsImZvcm1Qcm9qZWN0IiwiYWRkUHJvamVjdEJ0biIsImFkZFRhc2tCdG4iLCJjYW5jZWxUb2RvIiwiY2FuY2VsUHJvamVjdCIsImlzRWRpdEJ1dHRvblByZXNzZWQiLCJlZGl0U3RhY2siLCJoaWRlUHJvamVjdEZvcm0iLCJjb250YWlucyIsImFkZCIsInNob3dPbmx5VGhpc1Byb2plY3QiLCJudW1iZXIiLCJvcGVuZWRQcm9qZWN0Iiwib3BlbmVkUHJvamVjdE5hbWUiLCJ0YXNrQnV0dG9uIiwicHJvamVjdFRvZG8iLCJoaWRlVG9kb0Zvcm0iLCJ3aGljaEFjdGl2ZSIsInNob3dUb2Rvc09mUHJvamVjdCIsInNob3dUb2RvRm9ybSIsImhpZGVUb2Rvc09mUHJvamVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJwcmV2ZW50RGVmYXVsdCIsImRlbFByb2plY3QiLCJsb2NhdGlvbiIsInJlbG9hZCIsImRlbCIsImVkaXQiLCJkZWNyaXB0aW9uIiwiZGF0ZSIsInBvcCIsIm9wZW5lZE9iamVjdCIsImFkZFRvZG9Ub1Byb2plY3QiXSwibWFwcGluZ3MiOiJ1RkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSwyMUJBQTgxQixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw2QkFBNkIsTUFBUSxHQUFHLFNBQVcsd2FBQXdhLGVBQWlCLENBQUMsNDFCQUE4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SUFHcEMsR0FGQUEsRUFBRWdJLGlCQUNGTixJQUNJWCxFQUFxQixDQUN2QkMsRUFBVXdCLE1BQ1YsTUFBTXpNLEVBQUlpTCxFQUFVd0IsTUFDcEJaLEVBQW1CN0wsR0FDbkJnTCxHQUFzQixNQUNqQixDQUNMLE1BQU1SLEVBQUlvQixJQUNWQyxFQUFtQnJCLE9BSXZCTyxFQUFjaUIsaUJBQWlCLFNBQVUvSCxJQUN2Q0EsRUFBRWdJLGlCQUNGZixRIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi50aXRsZS10eHQge1xcbiAgZm9udC1zaXplOiA1MHB4O1xcbiAgZm9udC1mYW1pbHk6IFxcXCJPcmlnaW5hbCBTdXJmZXJcXFwiLCBjdXJzaXZlO1xcbiAgZm9udC13ZWlnaHQ6IDgwMDtcXG4gIHRyYW5zaXRpb246IGxldHRlci1zcGFjaW5nIDFzO1xcbn1cXG5cXG4udGl0bGUtdHh0OmhvdmVyIHtcXG4gIGxldHRlci1zcGFjaW5nOiA0cHg7XFxufVxcblxcbi5ib2xkLXRleHQge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5iZy1ncmF5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlYmViZWI7XFxufVxcblxcbi5wZXJtYW5lbnQtYmFjay1ncmF5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzUsIDE3MywgMTczKSAhaW1wb3J0YW50O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG5cXG4uY29sLXdoaXRlIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmgtMTAwLXZoIHtcXG4gIGhlaWdodDogODkuNXZoO1xcbn1cXG5cXG4uYWRkLWJ0biB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwYWRkaW5nOiA1cHggOXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcXG59XFxuXFxuLmFkZC1idG46aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3NSwgMTczLCAxNzMpO1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAxcztcXG59XFxuXFxuLmRpcy1ub25lIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLmN1ci1wb2ludGVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnctNDgge1xcbiAgd2lkdGg6IDQ4JTtcXG59XFxuXFxuLmNyb3NzIHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGVBQWU7RUFDZix1Q0FBdUM7RUFDdkMsZ0JBQWdCO0VBQ2hCLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLCtDQUErQztFQUMvQyxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLGdCQUFnQjtFQUNoQix5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSxvQ0FBb0M7RUFDcEMsa0JBQWtCO0VBQ2xCLCtCQUErQjtBQUNqQzs7QUFFQTtFQUNFLHdCQUF3QjtBQUMxQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxZQUFZO0VBQ1oscUJBQXFCO0VBQ3JCLGtCQUFrQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudGl0bGUtdHh0IHtcXG4gIGZvbnQtc2l6ZTogNTBweDtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiT3JpZ2luYWwgU3VyZmVyXFxcIiwgY3Vyc2l2ZTtcXG4gIGZvbnQtd2VpZ2h0OiA4MDA7XFxuICB0cmFuc2l0aW9uOiBsZXR0ZXItc3BhY2luZyAxcztcXG59XFxuXFxuLnRpdGxlLXR4dDpob3ZlciB7XFxuICBsZXR0ZXItc3BhY2luZzogNHB4O1xcbn1cXG5cXG4uYm9sZC10ZXh0IHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4uYmctZ3JheSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWJlYmViO1xcbn1cXG5cXG4ucGVybWFuZW50LWJhY2stZ3JheSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTc1LCAxNzMsIDE3MykgIWltcG9ydGFudDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuXFxuLmNvbC13aGl0ZSB7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5oLTEwMC12aCB7XFxuICBoZWlnaHQ6IDg5LjV2aDtcXG59XFxuXFxuLmFkZC1idG4ge1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogNXB4IDlweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbi5hZGQtYnRuOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzUsIDE3MywgMTczKTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMXM7XFxufVxcblxcbi5kaXMtbm9uZSB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jdXItcG9pbnRlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi53LTQ4IHtcXG4gIHdpZHRoOiA0OCU7XFxufVxcblxcbi5jcm9zcyB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImNvbnN0IHRhYnMgPSAoKCkgPT4ge1xuICBjb25zdCBwYXJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpO1xuICBwYXJlbnQuaW5uZXJIVE1MID0gYFxuICAgIDxuYXYgY2xhc3M9XCJuYXZiYXIgbmF2YmFyLWRhcmsgYmctZGFya1wiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJuYXZiYXItYnJhbmQgbWItMCBoMSB0aXRsZS10eHRcIj48aSBjbGFzcz1cImZhciBmYS1jYWxlbmRhci1jaGVjayBtci0zXCI+PC9pPiBUb0Rvczwvc3Bhbj5cbiAgICA8L25hdj5cbiAgYDtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHRhYnM7IiwiY29uc3Qgc2lkZUJhciA9ICgoKSA9PiB7XG4gIGNvbnN0IHBhcmVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50Jyk7XG5cbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnRhaW5lci5jbGFzc05hbWUgPSAnY29udGFpbmVyLWZsdWlkJztcblxuICBjb250YWluZXIuaW5uZXJIVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgIDxkaXYgaWQgPSAnbGVmdC1jb250YWluZXInIGNsYXNzPSdjb2wtMyBiZy1ncmF5IGgtMTAwLXZoJz5cbiAgICAgICAgPGgyIGNsYXNzID0gJ2JvbGQtdGV4dCBkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBtdC0zJz48aSBjbGFzcz1cImZhcyBmYS1wcm9qZWN0LWRpYWdyYW0gbXItMlwiPjwvaT5Qcm9qZWN0czwvaDI+XG4gICAgICAgIDxidXR0b24gaWQgPSAnYWRkLXByb2plY3QnIGNsYXNzID0gJ2FkZC1idG4gY3VyLXBvaW50ZXIgdy0xMDAgbXktMiB0ZXh0LWxlZnQnPjxpIGNsYXNzPSdmYXMgZmEtcGx1cyBtci0yJz48L2k+IEFkZCBQcm9qZWN0PC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgaWQgPSAncmlnaHQtY29udGFpbmVyJyBjbGFzcz1cImNvbC05XCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gIGA7XG5cbiAgcGFyZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBzaWRlQmFyOyIsImNvbnN0IGZvcm1Gb3JQcm9qZWN0ID0gKCgpID0+IHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xlZnQtY29udGFpbmVyJyk7XG4gIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZm9ybS5pZCA9ICdwcm9qZWN0LWZvcm0nO1xuICBmb3JtLmNsYXNzTGlzdCA9ICdkaXMtbm9uZSc7XG4gIGZvcm0uaW5uZXJIVE1MID0gYFxuICAgIDxmb3JtPlxuICAgICAgPGlucHV0IGlkID0gJ3Byb2otbmFtZScgY2xhc3MgPSAnZm9ybS1jb250cm9sJyB0eXBlPSd0ZXh0JyBuYW1lID0gJ3Byb2otbmFtZScgcGxhY2Vob2xkZXI9XCJQcm9qZWN0IG5hbWUuLlwiPlxuICAgICAgPGlucHV0IGlkID0gJ2FkLXByb2onIGNsYXNzID0gJ2J0biBidG4tcHJpbWFyeSBteS0xIHctNDgnIHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIkFkZFwiPlxuICAgICAgPGlucHV0IGlkID0gJ2NhbmNlbFByb2plY3QnIGNsYXNzID0gJ2J0biBidG4tZGFuZ2VyIHctNTAnIHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIkNhbmNlbFwiPlxuICAgIDwvZm9ybT5cbiAgYDtcblxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZm9ybSk7XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtRm9yUHJvamVjdDtcbiIsImNvbnN0IGNyZWF0ZUxpc3QgPSAodGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSkgPT4gKHtcbiAgdGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSxcbn0pO1xuXG5jb25zdCBjcmVhdGVQcm9qZWN0ID0gKG5hbWUpID0+IHtcbiAgY29uc3QgdG9kb3MgPSBbXTtcbiAgLy8gY29uc3QgYWRkVG9EbyA9ICh0aXRsZSxkZXNjcmlwdGlvbixkdWVEYXRlLHByaW9yaXR5KSA9PiB7XG4gIC8vICAgY29uc3QgbGlzdCA9IGNyZWF0ZUxpc3QodGl0bGUsZGVzY3JpcHRpb24sZHVlRGF0ZSxwcmlvcml0eSk7XG4gIC8vICAgdG9kb3MucHVzaChsaXN0KTtcbiAgLy8gfVxuICByZXR1cm4ge1xuICAgIG5hbWUsIHRvZG9zLFxuICB9O1xufTtcblxuZXhwb3J0IHsgY3JlYXRlUHJvamVjdCwgY3JlYXRlTGlzdCB9OyIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0ICcuL3RhYnMnO1xuaW1wb3J0ICcuL3NpZGVfYmFyJztcbmltcG9ydCAnLi9mb3JtX3Byb2plY3QnO1xuaW1wb3J0IGxvYWRQcm9qZWN0cyBmcm9tICcuL2xvYWRfcHJvamVjdHMnO1xuaW1wb3J0IGxvYWRQcm9qZWN0VG9kb3MgZnJvbSAnLi9sb2FkX3Byb2plY3RfdG9kb3MnO1xuaW1wb3J0IHsgY3JlYXRlUHJvamVjdCwgY3JlYXRlTGlzdCB9IGZyb20gJy4vZmFjdG9yeV9mdW50aW9ucyc7XG5cbi8vIG1ha2UgZGVhZnVsdCBwcm9qZWN0XG5sZXQgc3RvcmVkTmFtZXMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0bmFtZXMnKSk7XG5pZiAoc3RvcmVkTmFtZXMgPT09IG51bGwgfHwgc3RvcmVkTmFtZXMubGVuZ3RoID09PSAwKSB7XG4gIHN0b3JlZE5hbWVzID0gW107XG4gIGNvbnN0IGRlZiA9IGNyZWF0ZVByb2plY3QoJ2RlZmF1bHQnKTtcbiAgY29uc3QgbGlzdCA9IGNyZWF0ZUxpc3QoJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJywgJ2R1ZURhdGUnLCAncHJpb3JpdHknKTtcbiAgZGVmLnRvZG9zLnB1c2gobGlzdCk7XG4gIHN0b3JlZE5hbWVzLnB1c2goZGVmKTtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RuYW1lcycsIEpTT04uc3RyaW5naWZ5KHN0b3JlZE5hbWVzKSk7XG59XG5cbi8vIGxvYWQgYWxsIHByb2plY3RzIGluIGxlZnQgc2lkZSBiYXJcbmxvYWRQcm9qZWN0cygpO1xuLy8gbG9hZCBhbGwgcHJvamVjdHMgdG9kb3MgYW5kIGhpZGUgdGhlbSBieSBkZWZhdWx0XG5sb2FkUHJvamVjdFRvZG9zKHN0b3JlZE5hbWVzKTtcblxuLy8gZ2xvYmFsIHZhcmliYWxlc1xuY29uc3QgYWRkUHJvamVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtcHJvamVjdCcpO1xuY29uc3QgZm9ybVByb2plY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdC1mb3JtJyk7XG5jb25zdCBhZGRQcm9qZWN0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkLXByb2onKTtcbmNvbnN0IGFkZFRhc2tCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkLXRvZG8nKTtcbmNvbnN0IGNhbmNlbFRvZG8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FuY2VsJyk7XG5jb25zdCBjYW5jZWxQcm9qZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbmNlbFByb2plY3QnKTtcbmxldCBpc0VkaXRCdXR0b25QcmVzc2VkID0gZmFsc2U7XG5jb25zdCBlZGl0U3RhY2sgPSBbXTtcblxuLy8gaGVscGVyZnVudGlvbnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuY29uc3QgZGlzcGxheVByb2plY3RGb3JtID0gKCkgPT4ge1xuICBmb3JtUHJvamVjdC5jbGFzc0xpc3QucmVtb3ZlKCdkaXMtbm9uZScpO1xufTtcbmNvbnN0IGhpZGVQcm9qZWN0Rm9ybSA9ICgpID0+IHtcbiAgaWYgKCEoZm9ybVByb2plY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXMtbm9uZScpKSkge1xuICAgIGZvcm1Qcm9qZWN0LmNsYXNzTGlzdC5hZGQoJ2Rpcy1ub25lJyk7XG4gIH1cbn07XG5jb25zdCBzaG93T25seVRoaXNQcm9qZWN0ID0gKG51bWJlcikgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0b3JlZE5hbWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qgb3BlbmVkUHJvamVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBuYW1lLSR7aX1gKTtcbiAgICBjb25zdCBvcGVuZWRQcm9qZWN0TmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBwcm9qZWN0LSR7aX1gKTtcbiAgICBjb25zdCB0YXNrQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHRhc2stYnV0dG9uLSR7aX1gKTtcblxuICAgIGlmIChpID09PSBudW1iZXIpIHtcbiAgICAgIG9wZW5lZFByb2plY3QuY2xhc3NMaXN0LnJlbW92ZSgnZGlzLW5vbmUnKTtcbiAgICAgIHRhc2tCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnZGlzLW5vbmUnKTtcbiAgICAgIGlmICghKG9wZW5lZFByb2plY3ROYW1lLmNsYXNzTGlzdC5jb250YWlucygncGVybWFuZW50LWJhY2stZ3JheScpKSkge1xuICAgICAgICBvcGVuZWRQcm9qZWN0TmFtZS5jbGFzc0xpc3QuYWRkKCdwZXJtYW5lbnQtYmFjay1ncmF5Jyk7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3RvcmVkTmFtZXNbaV0udG9kb3MubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdFRvZG8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgdGFzay0ke2l9LSR7an1gKTtcbiAgICAgICAgcHJvamVjdFRvZG8uY2xhc3NMaXN0LnJlbW92ZSgnZGlzLW5vbmUnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCEob3BlbmVkUHJvamVjdC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpcy1ub25lJykpKSB7XG4gICAgICAgIG9wZW5lZFByb2plY3QuY2xhc3NMaXN0LmFkZCgnZGlzLW5vbmUnKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHRhc2tCdXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXMtbm9uZScpKSkge1xuICAgICAgICB0YXNrQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2Rpcy1ub25lJyk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0b3JlZE5hbWVzW2ldLnRvZG9zLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3RUb2RvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHRhc2stJHtpfS0ke2p9YCk7XG4gICAgICAgIGlmICghKHByb2plY3RUb2RvLmNsYXNzTGlzdC5jb250YWlucygnZGlzLW5vbmUnKSkpIHtcbiAgICAgICAgICBwcm9qZWN0VG9kby5jbGFzc0xpc3QuYWRkKCdkaXMtbm9uZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvcGVuZWRQcm9qZWN0TmFtZS5jbGFzc0xpc3QucmVtb3ZlKCdwZXJtYW5lbnQtYmFjay1ncmF5Jyk7XG4gICAgfVxuICB9XG59O1xuY29uc3QgZGVsZXRlUHJvamVjdCA9IChpbmRleCkgPT4ge1xuICBzdG9yZWROYW1lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdG5hbWVzJywgSlNPTi5zdHJpbmdpZnkoc3RvcmVkTmFtZXMpKTtcbiAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xufTtcbmNvbnN0IGhpZGVUb2RvRm9ybSA9ICgpID0+IHtcbiAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2RvLWZvcm0nKTtcbiAgaWYgKCEoZm9ybS5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpcy1ub25lJykpKSB7XG4gICAgZm9ybS5jbGFzc0xpc3QuYWRkKCdkaXMtbm9uZScpO1xuICB9XG59O1xuY29uc3Qgd2hpY2hBY3RpdmUgPSAoKSA9PiB7XG4gIGxldCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgc3RvcmVkTmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBvcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBuYW1lLSR7aX1gKTtcbiAgICBpZiAoIShvcC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpcy1ub25lJykpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGk7XG59O1xuY29uc3QgYWRkVG9kb1RvUHJvamVjdCA9ICh0aXRsZSwgZGVjcmlwdGlvbiwgZGF0ZSwgcHJpb3JpdHkpID0+IHtcbiAgaWYgKGlzRWRpdEJ1dHRvblByZXNzZWQpIHtcbiAgICBjb25zdCBqID0gZWRpdFN0YWNrLnBvcCgpO1xuICAgIGNvbnN0IGkgPSBlZGl0U3RhY2sucG9wKCk7XG4gICAgc3RvcmVkTmFtZXNbaV0udG9kb3Nbal0udGl0bGUgPSB0aXRsZTtcbiAgICBzdG9yZWROYW1lc1tpXS50b2Rvc1tqXS5kZXNjcmlwdGlvbiA9IGRlY3JpcHRpb247XG4gICAgc3RvcmVkTmFtZXNbaV0udG9kb3Nbal0uZHVlRGF0ZSA9IGRhdGU7XG4gICAgc3RvcmVkTmFtZXNbaV0udG9kb3Nbal0ucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICBpc0VkaXRCdXR0b25QcmVzc2VkID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaSA9IHdoaWNoQWN0aXZlKCk7XG4gICAgY29uc3Qgb3BlbmVkT2JqZWN0ID0gc3RvcmVkTmFtZXNbaV07XG4gICAgY29uc3QgbGlzdCA9IGNyZWF0ZUxpc3QodGl0bGUsIGRlY3JpcHRpb24sIGRhdGUsIHByaW9yaXR5KTtcbiAgICBvcGVuZWRPYmplY3QudG9kb3MucHVzaChsaXN0KTtcbiAgfVxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdG5hbWVzJywgSlNPTi5zdHJpbmdpZnkoc3RvcmVkTmFtZXMpKTtcbiAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xufTtcbmNvbnN0IGhpZGVUb2Rvc09mUHJvamVjdCA9IChpKSA9PiB7XG4gIGZvciAobGV0IGogPSAwOyBqIDwgc3RvcmVkTmFtZXNbaV0udG9kb3MubGVuZ3RoOyBqICs9IDEpIHtcbiAgICBjb25zdCBlbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgdGFzay0ke2l9LSR7an1gKTtcbiAgICBlbGUuY2xhc3NMaXN0LmFkZCgnZGlzLW5vbmUnKTtcbiAgfVxufTtcbmNvbnN0IHNob3dUb2Rvc09mUHJvamVjdCA9IChpKSA9PiB7XG4gIGZvciAobGV0IGogPSAwOyBqIDwgc3RvcmVkTmFtZXNbaV0udG9kb3MubGVuZ3RoOyBqICs9IDEpIHtcbiAgICBjb25zdCBlbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgdGFzay0ke2l9LSR7an1gKTtcbiAgICBlbGUuY2xhc3NMaXN0LnJlbW92ZSgnZGlzLW5vbmUnKTtcbiAgfVxufTtcbmNvbnN0IHNob3dUb2RvRm9ybSA9ICgpID0+IHtcbiAgY29uc3QgZm9ybVRvZG8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9kby1mb3JtJyk7XG4gIGZvcm1Ub2RvLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpcy1ub25lJyk7XG4gIGNvbnN0IGwgPSB3aGljaEFjdGl2ZSgpO1xuICBoaWRlVG9kb3NPZlByb2plY3QobCk7XG59O1xuY29uc3QgY2hhbmdlSXNFZGl0QnV0dG9uUHJlc3NlZCA9ICh2YWwpID0+IHtcbiAgaXNFZGl0QnV0dG9uUHJlc3NlZCA9IHZhbDtcbn07XG5cbi8vIGV2ZW50TGlzdGVuZXJzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmFkZFByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gIGRpc3BsYXlQcm9qZWN0Rm9ybSgpO1xufSk7XG5cbmFkZFByb2plY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICBjb25zdCBuYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2otbmFtZScpLnZhbHVlO1xuXG4gIGlmIChuYW1lICE9PSAnJykge1xuICAgIGhpZGVQcm9qZWN0Rm9ybSgpO1xuICAgIGNvbnN0IGRlZiA9IGNyZWF0ZVByb2plY3QobmFtZSk7XG4gICAgc3RvcmVkTmFtZXMucHVzaChkZWYpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0bmFtZXMnLCBKU09OLnN0cmluZ2lmeShzdG9yZWROYW1lcykpO1xuICB9IGVsc2Uge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxufSk7XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgc3RvcmVkTmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgY29uc3Qgb3BlbmVkUHJvamVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBwcm9qZWN0LSR7aX1gKTtcbiAgY29uc3QgZGVsUHJvamVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBkZWwtcHJvamVjdC0ke2l9YCk7XG4gIGNvbnN0IHRhc2tCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgdGFzay1idXR0b24tJHtpfWApO1xuXG4gIG9wZW5lZFByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaGlkZVRvZG9Gb3JtKCk7XG4gICAgc2hvd09ubHlUaGlzUHJvamVjdChpKTtcbiAgfSk7XG5cbiAgb3BlbmVkUHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoKSA9PiB7XG4gICAgZGVsUHJvamVjdC5jbGFzc0xpc3QucmVtb3ZlKCdkaXMtbm9uZScpO1xuICB9KTtcblxuICBvcGVuZWRQcm9qZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgKCkgPT4ge1xuICAgIGlmICghKGRlbFByb2plY3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXMtbm9uZScpKSkge1xuICAgICAgZGVsUHJvamVjdC5jbGFzc0xpc3QuYWRkKCdkaXMtbm9uZScpO1xuICAgIH1cbiAgfSk7XG5cbiAgZGVsUHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBkZWxldGVQcm9qZWN0KGkpO1xuICB9KTtcblxuICB0YXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIHNob3dUb2RvRm9ybSgpO1xuICB9KTtcblxuICBmb3IgKGxldCBqID0gMDsgaiA8IHN0b3JlZE5hbWVzW2ldLnRvZG9zLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgY29uc3QgZGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGRlbGV0ZS0ke2l9LSR7an1gKTtcbiAgICBjb25zdCBlZGl0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGVkaXQtJHtpfS0ke2p9YCk7XG5cbiAgICBkZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBzdG9yZWROYW1lc1tpXS50b2Rvcy5zcGxpY2UoaiwgMSk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdG5hbWVzJywgSlNPTi5zdHJpbmdpZnkoc3RvcmVkTmFtZXMpKTtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICB9KTtcblxuICAgIGVkaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjaGFuZ2VJc0VkaXRCdXR0b25QcmVzc2VkKHRydWUpO1xuICAgICAgZWRpdFN0YWNrLnB1c2goaSk7XG4gICAgICBlZGl0U3RhY2sucHVzaChqKTtcbiAgICAgIGNvbnN0IHsgdGl0bGUgfSA9IHN0b3JlZE5hbWVzW2ldLnRvZG9zW2pdO1xuICAgICAgY29uc3QgZGVjcmlwdGlvbiA9IHN0b3JlZE5hbWVzW2ldLnRvZG9zW2pdLmRlc2NyaXB0aW9uO1xuICAgICAgY29uc3QgZGF0ZSA9IHN0b3JlZE5hbWVzW2ldLnRvZG9zW2pdLmR1ZURhdGU7XG4gICAgICBjb25zdCB7IHByaW9yaXR5IH0gPSBzdG9yZWROYW1lc1tpXS50b2Rvc1tqXTtcbiAgICAgIHNob3dUb2RvRm9ybSgpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZG8tdGl0bGUnKS52YWx1ZSA9IHRpdGxlO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZG8tZGVzY3JpcHRpb24nKS52YWx1ZSA9IGRlY3JpcHRpb247XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9kby1kYXRlJykudmFsdWUgPSBkYXRlO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZG8tcHJpb3JpdHknKS52YWx1ZSA9IHByaW9yaXR5O1xuICAgIH0pO1xuICB9XG59XG5cbmFkZFRhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZG8tdGl0bGUnKS52YWx1ZTtcbiAgY29uc3QgZGVjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2RvLWRlc2NyaXB0aW9uJykudmFsdWU7XG4gIGNvbnN0IGRhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9kby1kYXRlJykudmFsdWU7XG4gIGNvbnN0IHByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZG8tcHJpb3JpdHknKS52YWx1ZTtcblxuICBpZiAodGl0bGUgIT09ICcnICYmIGRlY3JpcHRpb24gIT09ICcnICYmIGRhdGUgIT09ICcnICYmIHByaW9yaXR5ICE9PSAnJykge1xuICAgIGhpZGVUb2RvRm9ybSgpO1xuICAgIGFkZFRvZG9Ub1Byb2plY3QodGl0bGUsIGRlY3JpcHRpb24sIGRhdGUsIHByaW9yaXR5KTtcbiAgfVxufSk7XG5cbmNhbmNlbFRvZG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGhpZGVUb2RvRm9ybSgpO1xuICBpZiAoaXNFZGl0QnV0dG9uUHJlc3NlZCkge1xuICAgIGVkaXRTdGFjay5wb3AoKTtcbiAgICBjb25zdCBpID0gZWRpdFN0YWNrLnBvcCgpO1xuICAgIHNob3dUb2Rvc09mUHJvamVjdChpKTtcbiAgICBpc0VkaXRCdXR0b25QcmVzc2VkID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaiA9IHdoaWNoQWN0aXZlKCk7XG4gICAgc2hvd1RvZG9zT2ZQcm9qZWN0KGopO1xuICB9XG59KTtcblxuY2FuY2VsUHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgaGlkZVByb2plY3RGb3JtKCk7XG59KTtcbiIsImNvbnN0IGxvYWRQcm9qZWN0cyA9ICgpID0+IHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xlZnQtY29udGFpbmVyJyk7XG4gIGNvbnN0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdG5hbWVzJykpO1xuICBjb25zdCBzaXplID0gcHJvamVjdHMubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkgKz0gMSkge1xuICAgIGNvbnN0IHByb2plY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwcm9qZWN0LmlkID0gYHByb2plY3QtJHtpfWA7XG4gICAgcHJvamVjdC5jbGFzc05hbWUgPSAnYWRkLWJ0biBjdXItcG9pbnRlciBib2xkLXRleHQgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuJztcbiAgICBwcm9qZWN0LmlubmVySFRNTCA9IGA8ZGl2PjxpIGNsYXNzPVwiZmFzIGZhLXRoLWxpc3RcIj48L2k+ICR7cHJvamVjdHNbaV0ubmFtZX08L2Rpdj4gPGlucHV0IGlkID0gJ2RlbC1wcm9qZWN0LSR7aX0nIGNsYXNzID0gJ2Nyb3NzIGRpcy1ub25lJyB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJ4XCI+YDtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocHJvamVjdCk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvYWRQcm9qZWN0czsiLCJjb25zdCBsb2FkUHJvamVjdFRvZG9zID0gKHN0b3JlZE5hbWVzKSA9PiB7XG4gIGNvbnN0IGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmlnaHQtY29udGFpbmVyJyk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdG9yZWROYW1lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IG5ld2QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBuZXdkLmlkID0gYG5hbWUtJHtpfWA7XG4gICAgbmV3ZC5pbm5lckhUTUwgPSBgPGgxIGNsYXNzID0gJ2JvbGQtdGV4dCBtbC0zIG10LTMnPiR7c3RvcmVkTmFtZXNbaV0ubmFtZX08L2gxPmA7XG4gICAgbmV3ZC5jbGFzc05hbWUgPSAnZGlzLW5vbmUnO1xuICAgIGQuYXBwZW5kQ2hpbGQobmV3ZCk7XG5cbiAgICBjb25zdCBuZXdUID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbmV3VC5pZCA9IGB0YXNrLWJ1dHRvbi0ke2l9YDtcbiAgICBuZXdULmlubmVySFRNTCA9ICc8YnV0dG9uIGlkID0gXFwnYWRkLXRhc2tcXCcgY2xhc3MgPSBcXCdhZGQtYnRuIGN1ci1wb2ludGVyIHctMTAwIG15LTIgdGV4dC1jZW50ZXJcXCc+PGkgY2xhc3M9XFwnZmFzIGZhLXBsdXMgbXItMlxcJz48L2k+IEFkZCBUYXNrPC9idXR0b24+JztcbiAgICBuZXdULmNsYXNzTmFtZSA9ICdkaXMtbm9uZSc7XG4gICAgZC5hcHBlbmRDaGlsZChuZXdUKTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3RvcmVkTmFtZXNbaV0udG9kb3MubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGNvbnN0IG5ld1RvZG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIG5ld1RvZG8uY2xhc3NOYW1lID0gJ2Rpcy1ub25lIGNhcmQgY29sLTQgbXgtYXV0byBteS0yJztcbiAgICAgIG5ld1RvZG8uaWQgPSBgdGFzay0ke2l9LSR7an1gO1xuICAgICAgbmV3VG9kby5pbm5lckhUTUwgPSBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICA8aDUgY2xhc3M9XCJjYXJkLXRpdGxlIGJvbGQtdGV4dFwiPiR7c3RvcmVkTmFtZXNbaV0udG9kb3Nbal0udGl0bGV9PC9oNT5cbiAgICAgICAgICA8cCBjbGFzcz1cImNhcmQtdGV4dFwiPiR7c3RvcmVkTmFtZXNbaV0udG9kb3Nbal0uZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2FyZC1saW5rIGJvbGQtdGV4dFwiPiR7c3RvcmVkTmFtZXNbaV0udG9kb3Nbal0uZHVlRGF0ZX08L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJjYXJkLWxpbmsgYm9sZC10ZXh0XCI+JHtzdG9yZWROYW1lc1tpXS50b2Rvc1tqXS5wcmlvcml0eX08L3NwYW4+IDxicj5cbiAgICAgICAgICA8ZGl2IGNsYXNzID0gJ2QtZmxleCAgbXQtMyc+XG4gICAgICAgICAgICA8aW5wdXQgaWQgPSAnZWRpdC0ke2l9LSR7an0nIGNsYXNzID0gJ2J0biBidG4tcHJpbWFyeSB3LTUwIG1yLTInIHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIkVkaXRcIj5cbiAgICAgICAgICAgIDxpbnB1dCBpZCA9ICdkZWxldGUtJHtpfS0ke2p9JyBjbGFzcyA9ICdidG4gYnRuLWRhbmdlciB3LTUwJyB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJEZWxldGVcIj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICAgICAgZC5hcHBlbmRDaGlsZChuZXdUb2RvKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGZvcm0uaWQgPSAndG9kby1mb3JtJztcbiAgZm9ybS5jbGFzc0xpc3QgPSAnZGlzLW5vbmUgdy01MCBtLWF1dG8nO1xuICBmb3JtLmlubmVySFRNTCA9IGBcbiAgICAgIDxmb3JtPlxuICAgICAgICA8aW5wdXQgaWQgPSAndG9kby10aXRsZScgY2xhc3MgPSAnZm9ybS1jb250cm9sJyB0eXBlPSd0ZXh0JyBuYW1lPSd0b2RvLXRpdGxlJyBwbGFjZWhvbGRlcj0ndGl0bGUuLic+XG4gICAgICAgIDxpbnB1dCBpZCA9ICd0b2RvLWRlc2NyaXB0aW9uJyBjbGFzcyA9ICdmb3JtLWNvbnRyb2wnIHR5cGU9J3RleHQnIG5hbWU9J3RvZG8tZGVzY3JpcHRpb24nIHBsYWNlaG9sZGVyPSdkZXNjcmlwdGlvbi4uJz5cbiAgICAgICAgPGlucHV0IGlkID0gJ3RvZG8tZGF0ZScgY2xhc3MgPSAnZm9ybS1jb250cm9sJyB0eXBlPSd0ZXh0JyBuYW1lPSd0b2RvLWRhdGUnIHBsYWNlaG9sZGVyPSdkdWUtZGF0ZS4uJz5cbiAgICAgICAgPGlucHV0IGlkID0gJ3RvZG8tcHJpb3JpdHknIGNsYXNzID0gJ2Zvcm0tY29udHJvbCcgdHlwZT0ndGV4dCcgbmFtZT0ndG9kby1wcmlvcml0eScgcGxhY2Vob2xkZXI9J3ByaW9yaXR5Li4nPlxuICAgICAgICA8aW5wdXQgaWQgPSAnYWRkLXRvZG8nIGNsYXNzID0gJ2J0biBidG4tcHJpbWFyeSBteS0xIHctNDgnIHR5cGU9J3N1Ym1pdCcgdmFsdWU9J0FkZCc+XG4gICAgICAgIDxpbnB1dCBpZCA9ICdjYW5jZWwnIGNsYXNzID0gJ2J0biBidG4tZGFuZ2VyIHctNTAnIHR5cGUgPSAnc3VibWl0JyB2YWx1ZSA9ICdDYW5jZWwnPlxuICAgICAgPC9mb3JtPlxuICAgIGA7XG5cbiAgZC5hcHBlbmRDaGlsZChmb3JtKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxvYWRQcm9qZWN0VG9kb3M7XG4iXSwic291cmNlUm9vdCI6IiJ9